/**
 * 
 */
package com.example.plutusbank;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;

/**
 * BankDataBaseManager create and maintain the Plutus SQLite database. The
 * functionality may includes the followings or more: create tables, delete
 * tables, insert and update.
 * 
 * NOTE: Inner class, BankDatabaseHelper, helps to manage database creation and
 * version management. It is located at the very bottom of the implementation.
 * 
 * @author Kevin Cheng
 * 
 */
public class BankDatabaseManager {
    /**
     * SQLite storage class.
     */
    private static final String TEXT_TYPE = " TEXT";
    private static final String INTEGER_TYPE = " INTEGER";
    private static final String REAL_TYPE = " REAL";

    /**
     * SQLite configuration phrase.
     */
    private static final String COMMA = ",";

    /**
     * SQLite statement: create table.
     */
    // Create User table statement.
    private static final String CREATE_USER_TABLE = "CREATE TABLE IF NOT EXISTS "
            + BankDatabaseSchema.User.TABLE_NAME
            + " ("
            + BankDatabaseSchema.User._ID
            + " INTEGER PRIMARY KEY,"
            + BankDatabaseSchema.User.COLUMN_NAME_USERNAME
            + TEXT_TYPE
            + COMMA
            + BankDatabaseSchema.User.COLUMN_NAME_PASSWORD
            + TEXT_TYPE
            + COMMA
            + BankDatabaseSchema.User.COLUMN_NAME_FULL_NAME
            + TEXT_TYPE
            + COMMA
            + BankDatabaseSchema.User.COLUMN_NAME_PHONE
            + TEXT_TYPE
            + COMMA
            + BankDatabaseSchema.User.COLUMN_NAME_EMAIL + TEXT_TYPE + " )";

    // Create BankAccount table statement.
    private static final String CREATE_BANK_ACCOUNT_TABLE = "CREATE TABLE IF NOT EXISTS "
            + BankDatabaseSchema.BankAccount.TABLE_NAME
            + " ("
            + BankDatabaseSchema.BankAccount._ID
            + " INTEGER PRIMARY KEY,"
            + BankDatabaseSchema.BankAccount.COLUMN_NAME_TYPE
            + TEXT_TYPE
            + COMMA
            + BankDatabaseSchema.BankAccount.COLUMN_NAME_BALANCE
            + REAL_TYPE
            + COMMA
            + BankDatabaseSchema.BankAccount.COLUMN_NAME_THRESHOLD
            + REAL_TYPE
            + " )";

    // Create Transaction table statement.
    private static final String CREATE_TRANSACTION_TABLE = "CREATE TABLE IF NOT EXISTS "
            + BankDatabaseSchema.Transaction.TABLE_NAME
            + " ("
            + BankDatabaseSchema.Transaction._ID
            + " INTEGER PRIMARY KEY,"
            + BankDatabaseSchema.Transaction.COLUMN_NAME_TYPE
            + TEXT_TYPE
            + COMMA
            + BankDatabaseSchema.Transaction.COLUMN_NAME_AMOUNT
            + REAL_TYPE
            + COMMA
            + BankDatabaseSchema.Transaction.COLUMN_NAME_DATE
            + TEXT_TYPE
            + " )";

    // Create UserBankAccount table statement.
    // Create Purchase table statement.

    /**
     * SQLite Statement: delete table.
     */
    // Delete User table statement.
    private static final String DELETE_USER_TABLE = "DROP TABLE IF EXISTS "
            + BankDatabaseSchema.User.TABLE_NAME;

    // Delete BankAccount table statement.
    private static final String DELETE_BANK_ACCOUNT_TABLE = "DROP TABLE IF EXISTS "
            + BankDatabaseSchema.BankAccount.TABLE_NAME;

    // Delete Transaction table statement.
    private static final String DELETE_TRANSACTION_TABLE = "DROP TABLE IF EXISTS "
            + BankDatabaseSchema.Transaction.TABLE_NAME;

    // Delete UserBankAccount table statement.
    // Delete Purchase table statement.

    // Declare a SQLite database helper.
    private BankDatabaseHelper bankDatabaseHelper = null;

    // Declare a SQLite database object.
    private SQLiteDatabase bankDatabase = null;

    /**
     * Constructor to initialize/initiate the bank database thru
     * BankDatabaseHelper.
     */
    public BankDatabaseManager(Context myContext) {
        bankDatabaseHelper = new BankDatabaseHelper(myContext);
    }

    // The function return the database name.
    public String getBankDatabaseName() {
        return BankDatabaseHelper.DATABASE_NAME;
    }

    // Open the database in the read and write mode. Throw the exception when
    // the
    // database cannot be opened.
    public void openReadWriteMode() throws SQLException {
        bankDatabase = bankDatabaseHelper.getWritableDatabase();
    }

    // Open the database in the read mode. Throw the exception when the database
    // cannot be opened.
    public SQLiteDatabase openReadMode() throws SQLException {
        bankDatabase = bankDatabaseHelper.getReadableDatabase();

        // Return the reference to the bank database object, so we can query the
        // database from other activities. This is the read-only database
        // object.
        return bankDatabase;
    }

    // Close any database object.
    public void close() {
        bankDatabaseHelper.close();
    }

    // DANGER: DROP every tables in the bank database.
    public void dropAllTable(Context myContext) throws SQLException {
        /**
         * The current implementation of upgrade is to drop all tables and
         * re-create everyone of them. Since we do not change the Database
         * schema, so we can just use the current database version. Thus, we can
         * use onUpgrade.
         */
        bankDatabaseHelper.onUpgrade(bankDatabase,
                BankDatabaseHelper.DATABASE_VERSION,
                BankDatabaseHelper.DATABASE_VERSION);
    }

    /**
     * SQLite Insert.
     */
    // The function add a user entries
    public long addUser(String username, String password, String fullName,
            String phoneNumber, String email) {
        // Open the database in the read and write mode.
        openReadWriteMode();

        // Initialize a container storing values, which the content resolver can
        // process.
        ContentValues userData = new ContentValues();

        // If the username is not null and not empty, it's a valid new password.
        if (username == null || username == "") {
            throw new IllegalArgumentException(
                    "The username is NOT null and NOT empty!");
        } else {
            // Create a map of username and its column names as the key.
            userData.put(BankDatabaseSchema.User.COLUMN_NAME_USERNAME, username);
        }

        // If the new password is not null and not empty, it's a valid new
        // password.
        if (password == null || password == "") {
            throw new IllegalArgumentException(
                    "The password is NOT null and NOT empty!");
        } else {
            // Create a map of password and its column names as the key.
            userData.put(BankDatabaseSchema.User.COLUMN_NAME_PASSWORD, password);
        }

        // If the full name is not null and not empty, it's a valid full name
        if (fullName == null || fullName == "") {
            throw new IllegalArgumentException(
                    "The full name is NOT null and NOT empty!");
        } else {
            // Create a map of full name and its column names as the key.
            userData.put(BankDatabaseSchema.User.COLUMN_NAME_FULL_NAME,
                    fullName);
        }

        // Create a map of phone number and its column names as the key.
        userData.put(BankDatabaseSchema.User.COLUMN_NAME_PHONE, phoneNumber);

        // Create a map of email and its column names as the key.
        userData.put(BankDatabaseSchema.User.COLUMN_NAME_EMAIL, email);

        // Insert the user data.
        long newRowId = bankDatabase.insert(BankDatabaseSchema.User.TABLE_NAME,
                null, userData);

        return newRowId;
    }

    // The function add a bank account entry.
    public long addBankAccount(String type, double balance, double threshold) {
        // Open the database in the read and write mode.
        openReadWriteMode();

        // Initialize a container storing values, which the content resolver can
        // process.
        ContentValues bankAccountData = new ContentValues();

        // If the type of bank account is not null and not empty, it's a valid
        // type.
        if (type == null || type == "") {
            throw new IllegalArgumentException(
                    "The type of bank account is NOT null and NOT empty!");
        } else {
            // Create a map of username and its column names as the key.
            bankAccountData.put(
                    BankDatabaseSchema.BankAccount.COLUMN_NAME_TYPE, type);
        }

        // Create a map of balance and its column names as the key. Negative
        // balance means debt.
        bankAccountData.put(BankDatabaseSchema.BankAccount.COLUMN_NAME_BALANCE,
                balance);

        // The minimum threshold is 0.
        if (threshold < 0) {
            threshold = 0;
        }

        // Create a map of threshold and its column names as the key.
        bankAccountData
                .put(BankDatabaseSchema.BankAccount.COLUMN_NAME_THRESHOLD,
                        threshold);

        // Insert the bank account data.
        long newRowId = bankDatabase.insert(
                BankDatabaseSchema.BankAccount.TABLE_NAME, null,
                bankAccountData);

        return newRowId;
    }

    // The function add a transaction entry.
    public long addTrasaction(String type, double amount, String date) {
        // Open the database in the read and write mode.
        openReadWriteMode();

        // Initialize a container storing values, which the content resolver can
        // process.
        ContentValues transactionData = new ContentValues();

        // If the type of transaction is not null and not empty, it's a valid
        // type.
        if (type == null || type == "") {
            throw new IllegalArgumentException(
                    "The type of transaction is NOT null and NOT empty!");
        } else {
            // Create a map of username and its column names as the key.
            transactionData.put(
                    BankDatabaseSchema.Transaction.COLUMN_NAME_TYPE, type);
        }

        // The amount of transaction is greater than or equal to 0 for the
        // amount of purchase.
        if (amount < 0) {
            throw new IllegalArgumentException(
                    "Amount of transaction is non-negative.");
        } else {
            // Create a map of transaction amount and its column names as the
            // key.
            transactionData.put(
                    BankDatabaseSchema.Transaction.COLUMN_NAME_AMOUNT, amount);
        }

        // Create a map of threshold and its column names as the key.
        bankAccountData
                .put(BankDatabaseSchema.BankAccount.COLUMN_NAME_THRESHOLD,
                        threshold);

        // Insert the bank account data.
        long newRowId = bankDatabase.insert(
                BankDatabaseSchema.BankAccount.TABLE_NAME, null,
                bankAccountData);

        return newRowId;
    }

    // The function add a user-bankAccount entry.
    // The function add a purchase entry.

    /**
     * SQLite: Update.
     */
    // The function update the user information in the User table.
    public int updateUser(int userid, String newPassword, String newFullName,
            String newPhoneNumber, String newEmail) {
        // Open the database in the read and write mode.
        openReadWriteMode();

        // Initialize a container storing values.
        ContentValues newUserData = new ContentValues();

        // If the new password is not null and not empty, it's a valid new
        // password.
        if (newPassword == null || newPassword == "") {
            throw new IllegalArgumentException(
                    "The new password is NOT null and NOT empty!");
        } else {
            // Create a map of new password and its column names as the key.
            newUserData.put(BankDatabaseSchema.User.COLUMN_NAME_PASSWORD,
                    newPassword);
        }

        // If the new full name is not null and not empty, it's a valid new
        // full name.
        if (newFullName == null || newFullName == "") {
            throw new IllegalArgumentException(
                    "The new full name is NOT null and NOT empty!");
        } else {
            // Create a map of new password and its column names as the key.
            newUserData.put(BankDatabaseSchema.User.COLUMN_NAME_FULL_NAME,
                    newFullName);
        }

        // Create a map of new phone number and its column names as the key.
        if (newPhoneNumber != null && newPhoneNumber != "") {
            newUserData.put(BankDatabaseSchema.User.COLUMN_NAME_PHONE,
                    newPhoneNumber);
        }

        // Create a map of new email and its column names as the key.
        if (newEmail != null && newEmail != "") {
            newUserData
                    .put(BankDatabaseSchema.User.COLUMN_NAME_EMAIL, newEmail);
        }

        // Construct the where-clause to select based on userid.
        String whereClause = BankDatabaseSchema.User._ID + " == ?";

        // Provide the user id corresponding to the '?'.
        String[] whereClauseArgumentArray = { String.valueOf(userid) };

        // Update the user information.
        int nEffectRow = bankDatabase.update(
                BankDatabaseSchema.User.TABLE_NAME, newUserData, whereClause,
                whereClauseArgumentArray);

        // Return the number of effective rows associated with the userid.
        return nEffectRow;
    }

    // The function update the account threshold in the Bank Account table.
    public int updateAccountThreshold(int accountNumber, double newThreshold) {
        // Open the database in the read and write mode.
        openReadWriteMode();

        // Initialize a container storing values.
        ContentValues newBankAccountData = new ContentValues();

        // if the new threshold is less than 0, set it as 0.
        if (newThreshold < 0) {
            newThreshold = 0;
        }

        // Create a map of threshold and its column names as the key.
        newBankAccountData.put(
                BankDatabaseSchema.BankAccount.COLUMN_NAME_THRESHOLD,
                newThreshold);

        // Construct the where-clause to select based on account number.
        String whereClause = BankDatabaseSchema.BankAccount._ID + " == ?";

        // Provide the account number corresponding to "?".
        String[] whereClauseArgumentArray = { String.valueOf(accountNumber) };

        // Update the bank account
        int nEffectRow = bankDatabase.update(
                BankDatabaseSchema.BankAccount.TABLE_NAME, newBankAccountData,
                whereClause, whereClauseArgumentArray);

        return nEffectRow;
    }

    /**
     * SQLite: query all entries in a table.
     */
    // The function get all the user information from the User table.
    public Cursor getAllUser() {
        // Open the database in the read mode.
        openReadMode();

        // Define components of SQLite query.
        // http://stackoverflow.com/questions/10600670/sqlitedatabase-query-method
        String[] columnArray = null;
        String whereClause = null;
        String[] whereClauseArgumentArray = null;
        String groupBy = null;
        String having = null;
        String orderBy = null;

        // Retrieve all the enters in the User table.
        Cursor userTableCursor = bankDatabase.query(
                BankDatabaseSchema.User.TABLE_NAME, columnArray, whereClause,
                whereClauseArgumentArray, groupBy, having, orderBy);

        // Move the cursor to the first entry.
        if (userTableCursor != null) {
            userTableCursor.moveToFirst();
        }

        // Return the cursor of use table, where the cursor points at the first
        // entry.
        return userTableCursor;
    }

    // The function retrieves all the bank account information from the
    // BankAccount table.
    public Cursor getAllBankAccount() {
        // Open the database in the read mode.
        openReadMode();

        // Define components of SQLite query.
        // http://stackoverflow.com/questions/10600670/sqlitedatabase-query-method
        String[] columnArray = null;
        String whereClause = null;
        String[] whereClauseArgumentArray = null;
        String groupBy = null;
        String having = null;
        String orderBy = null;

        // Retrieve all the enters in the User table.
        Cursor bankAccountTableCursor = bankDatabase
                .query(BankDatabaseSchema.BankAccount.TABLE_NAME, columnArray,
                        whereClause, whereClauseArgumentArray, groupBy, having,
                        orderBy);

        // Move the cursor to the first entry.
        if (bankAccountTableCursor != null) {
            bankAccountTableCursor.moveToFirst();
        }

        // Return the cursor of use table, where the cursor points at the first
        // entry.
        return bankAccountTableCursor;
    }

    /**
     * SQLiteOpenHelper class helps to manage database creation and version
     * management.
     */
    public class BankDatabaseHelper extends SQLiteOpenHelper {
        // If we change the database schema, we need to update the database
        // version.
        public static final int DATABASE_VERSION = 1;

        // Generic database name
        public static final String DATABASE_NAME = "PlutusBankDatabase";

        /**
         * Default constructor calls SQLiteHelper to initialize the SQLite
         * database with the specified database name and database version.
         */
        public BankDatabaseHelper(Context myContext) {
            super(myContext, DATABASE_NAME, null, DATABASE_VERSION);
        }

        /**
         * onCreate is called when the database is created for the first time.
         */
        @Override
        public void onCreate(SQLiteDatabase myBankDatabase) {
            // While the creation of user table, we can catch the exception by
            // try-catch statements.

            // Create User table.
            myBankDatabase.execSQL(BankDatabaseManager.CREATE_USER_TABLE);

            // Create BankAccount table.
            myBankDatabase
                    .execSQL(BankDatabaseManager.CREATE_BANK_ACCOUNT_TABLE);

            // Create Transaction table.
            myBankDatabase
                    .execSQL(BankDatabaseManager.CREATE_TRANSACTION_TABLE);

            // Create UserBankAccount table.
            // Create Purchase table.
        }

        /**
         * onUpgrade is called when we need to update the database. The
         * implementation should use onUpgrade to add tables, drop tables and
         * upgrade new schema version.
         */
        @Override
        public void onUpgrade(SQLiteDatabase myBankDatabase, int oldVersion,
                int newVersion) {
            // Delete User table.
            myBankDatabase.execSQL(BankDatabaseManager.DELETE_USER_TABLE);

            // Delete BankAccount table.
            myBankDatabase
                    .execSQL(BankDatabaseManager.DELETE_BANK_ACCOUNT_TABLE);

            // Delete Transaction table.
            myBankDatabase
                    .execSQL(BankDatabaseManager.DELETE_TRANSACTION_TABLE);

            // Delete UserBankAccount table.
            // Delete Purchase table.

            // create the SQLite database with the newer version.
            onCreate(myBankDatabase);
        }

        /**
         * onDowngrade is called when the database needs to be downgraded. It is
         * called when the current database version is newer than the requested
         * one. It is not necessary to implement this function.
         */
        @Override
        public void onDowngrade(SQLiteDatabase myBankDatabase, int oldVersion,
                int newVersion) {
            // Call onUpgrade to update the database version and tables.
            onUpgrade(myBankDatabase, oldVersion, newVersion);
        }
    } // end of BankDatabaseHelper
} // end of BankDatabaseManager

// // If the new phone number is not null, it's a valid new phone number.
// if (newPhoneNumber != null) {
// // Create a map of new phone number and its column names as the key.
// newUserData
// .put(BankDatabaseSchema.User.COLUMN_NAME_PHONE, newPhoneNumber);
// } else {
// throw new
// IllegalArgumentException("The new phone number cannot be null!");
// }
//
// // If the new email address is not null, it's a valid new email address.
// if (newEmail != null) {
// // Create a map of new email and its column names as the key.
// newUserData.put(BankDatabaseSchema.User.COLUMN_NAME_EMAIL, newEmail);
// } else {
// throw new IllegalArgumentException("The Email address cannot be null!");
// }
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
